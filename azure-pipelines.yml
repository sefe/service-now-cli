name: $(BuildDefinitionName)_$(year:yy).$(Month).$(DayOfMonth)$(Rev:.r)

trigger:
- main
- release/*

pool:
  name: BUILD-DOTNET-01

variables:  
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  targetBuildFolder: '$(dropfolder)'
  projectKey: 'sh-devops-service-now-cli'
  majorVersion: '1'
  minorVersion: '0'
  patchVersion: '0'
  version: '$(majorVersion).$(minorVersion).$(patchVersion)'


stages:
  - stage: Build
    displayName: Build
    jobs:
    - job: Build
      steps:
      - task: NuGetToolInstaller@0

      - task: NuGetCommand@2
        inputs:
          restoreSolution: '$(solution)'

      - task: SonarQubePrepare@5
        displayName: 'Prepare the SonarQube analysis'
        inputs:
          SonarQube: 'SonarQube'
          scannerMode: 'MSBuild'
          projectKey: '$(projectKey)'
          projectName: '$(projectKey)'
          projectVersion: '$(Build.BuildNumber)'
        continueOnError: false

      - task: richardfennellbm.BM-VSTS-Versioning-Task.Version-DotNetCoreAssemblies-Task.VersionDotNetCoreAssemblies@3
        displayName: 'Version .NET Core Assemblies'
        inputs:
          AddDefault: true

      - task: VSBuild@1
        inputs:
          solution: '$(solution)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'

      - task: VSTest@2
        inputs:
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'

      - task: SonarQubeAnalyze@5

      - task: SynopsysDetectTask@9
        inputs:
          BlackDuckService: 'BlackDuck'
          DetectArguments: |
            --detect.project.name="$(projectKey)"
            --detect.project.version.name="$(projectKey)-$(Build.SourceBranchName)"
            --detect.source.path=$(Build.SourcesDirectory)
            --detect.tools.excluded=SIGNATURE_SCAN
            --detect.detector.search.depth=5
          DetectVersion: 'latest'
        condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))


      - task: CopyFiles@2
        displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
        inputs:
          SourceFolder: '$(system.defaultworkingdirectory)'
          Contents: '**\bin\$(BuildConfiguration)\**'
          TargetFolder: '$(build.artifactstagingdirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'
          publishLocation: FilePath
          TargetPath: '$(targetBuildFolder)\$(Build.BuildNumber)'
        condition: succeeded()


  - stage: DeployTest
    variables:
      environmentName: 'Test'
    displayName: Deploy
    dependsOn: [Build]
    condition: succeeded()
    jobs:
    - deployment: DeployJob
      displayName: 'Deploy CLI'
      environment: 
        name: ${{variables.environmentName}}
      strategy:
        runOnce:
          deploy:
            steps:
            - download: none
            - task: CopyFiles@2
              displayName: 'copy to common folder'
              inputs:
                SourceFolder: '$(targetBuildFolder)\$(Build.BuildNumber)\drop\src\ServiceNowCLI\bin\$(BuildConfiguration)\net8.0-windows\'
                Contents: '*.*'
                TargetFolder: '$(targetDeployFolder)\${{variables.environmentName}}'
                CleanTargetFolder: true
                OverWrite: true
            - task: FileTransform@2
              displayName: 'set configuration values'
              inputs:
                folderPath: '$(targetDeployFolder)\${{variables.environmentName}}'
